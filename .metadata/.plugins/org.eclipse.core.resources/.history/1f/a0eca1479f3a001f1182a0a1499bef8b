package com.example.boot07.controller;

import java.io.File;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

import org.springframework.web.bind.annotation.PostMapping;



@Slf4j
@Controller
public class FileController {
	/*
	 * custom.properties 파일에 있는 파일 업로드 경로를 읽어와서 필드에 담는다
	 */
	@Value("${file.location}")
	private String fileLocation;
	
	@GetMapping("/file/uploadform")
	public String uploadform() {
		/*
		 * 로그 레벨의 중요도
		 * 
		 * trace < debug < info < warn < error < fatal
		 * 
		 * spring boot 의 기본 로그 레벨은 info 이다
		 * 따라서 debud 로그도 출력하게 하려면 application.properties 설정을 바꿔야 한다.
		 * 
		 * 
		 */
		log.error("여기가 실행됨!");
		return "file/uploadform";
	}
	
	/*
	 * <input type="file" name="myFile"> 에 선택된 파일 데이터를 처리 하기 위해서는
	 * 
	 * MultipartFile myFile 로 매개변수를 선언하면 된다.(파라미터명과 매개변수명을 일치시킨다)
	 */
	@PostMapping("/file/upload")
	public String upload(String title, MultipartFile myFile, Model m) {
		//원본 파일명
		String orgFileName=myFile.getOriginalFilename();
		//파일의 크기
		long fileSize=myFile.getSize();
		//저장할 파일의 이름을 Universal Unique 한 ID 로 저장하기 위해
		String saveFileName=UUID.randomUUID().toString();
		//저장할 파일의 전체 경로 구성하기 "C:\Users\ user\playground\ upload"+"\"+"saveFileName"
		//File.separator_운영체제에 따라 다른 파일 구분자를 입력해준다(window=> \ )
		String filePath=fileLocation + File.separator + saveFileName;
		try {
			//업로드된 파일을 이동시킬 목적지 File 객체 생성
			File dest=new File(filePath);
			//MultipartFile 객체의 메소드를 통해서 실제로 이동시키기(전송하기)
			myFile.transferTo(dest);
		}catch(Exception e) {
			e.printStackTrace();
		}
		//원래는 DB 에 저장해야 하지만 테스트를 위해  view page 에 전달하기 
		m.addAttribute("orgFileName", orgFileName);
		m.addAttribute("saveFileName", saveFileName);
		m.addAttribute("fileSize", fileSize);
		return "file/upload";
	}
	
}
